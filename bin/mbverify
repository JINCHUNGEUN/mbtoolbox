#!/usr/bin/env python
"""Verify MBTiles contains all descendant tiles of a given tile.
Usage:
  mbverify redundant <mbtiles_file> <x> <y> -z=<min_zoom> -Z=<max_zoom> [--scheme=<scheme>]
  mbverify missing <mbtiles_file> <x> <y> -z=<min_zoom> -Z=<max_zoom> [--scheme=<scheme>]
  mbverify size <mbtiles_file> -s=<max_size> [--scheme=<scheme>]
  mbverify (-h | --help)
  mbverify --version

Options:
  -h --help                 Show this screen.
  --version                 Show version.
  -s=<max_size>             Maximum size of tile data in bytes
  -z=<min_zoom>             Minimum zoom to start verifying
  -Z=<max_zoom>             Maximum zoom to verify
  --scheme=<scheme>         Tiling scheme of the tiles can be either xyz or tms [default: tms]
"""
import mbtoolbox
from docopt import docopt
from mbtoolbox.verify import (verify_redundant_tiles,
                              verify_missing_tiles,
                              verify_size)


if __name__ == '__main__':
    args = docopt(__doc__, version=mbtoolbox.__version__)
    if args.get('redundant'):
        verify_redundant_tiles(
            args['<mbtiles_file>'],
            int(args['<x>']),
            int(args['<y>']),
            int(args['-z']),
            int(args['-Z']),
            args['--scheme']
        )

    if args.get('missing'):
        verify_missing_tiles(
            args['<mbtiles_file>'],
            int(args['<x>']),
            int(args['<y>']),
            int(args['-z']),
            int(args['-Z']),
            args['--scheme']
        )

    if args.get('size'):
        verify_size(
            args['<mbtiles_file>'],
            int(args['-s']),
            args['--scheme']
        )
